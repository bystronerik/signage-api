plugins {
	id "com.diffplug.spotless" version "5.13.0"
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'com.deizon'
version = '2.0.0'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url "https://maven.pkg.jetbrains.space/deizon/p/servicelibrary/maven"
		credentials {
			username=project.properties['username']
			password=project.properties['password']
		}
	}
}

dependencies {
	implementation 'junit:junit:4.13.1'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:8.1.1'
	implementation 'com.graphql-java-kickstart:graphql-java-tools:6.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework:spring-aspects'
	implementation 'io.projectreactor:reactor-core'
	implementation 'com.auth0:java-jwt:3.11.0'
	implementation 'io.sentry:sentry-spring-boot-starter:4.2.0'
	implementation "com.deizon.services:ServicesLibrary:1.4.2"
	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:8.1.1'
}

test {
	useJUnitPlatform()
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat().aosp()
		licenseHeader("/* Copyright: Erik Bystro≈à - Redistribution and any changes prohibited. */")
	}
}
